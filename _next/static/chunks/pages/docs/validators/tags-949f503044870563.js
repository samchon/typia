(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3867],{58154:(e,i,n)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/validators/tags",function(){return n(61763)}])},61763:(e,i,n)=>{"use strict";n.r(i),n.d(i,{default:()=>j,useTOC:()=>h});var s=n(37876),t=n(71807),r=n(19407),c=n(89707),l=n(39807),d=n(21826),a=n(95044),o=n(66953);function h(e){return[{value:"Outline",id:"outline",depth:2},{value:"Type Tags",id:"type-tags",depth:2},{value:"Comment Tags",id:"comment-tags",depth:2},{value:"Customization",id:"customization",depth:2}]}function x(e,i){throw Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}let j=(0,t.e)(function(e){let{toc:i=h(e)}=e,n={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return a.t||x("Tabs",!1),a.t.Tab||x("Tabs.Tab",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:i[0].id,children:i[0].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"typia"})," can perform additional validation through ",(0,s.jsx)(n.a,{href:"#type-tags",children:"type tags"})," and ",(0,s.jsx)(n.a,{href:"#comment-tags",children:"comment tags"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When you need additional validation logic that is not supported in pure TypeScript type spec, you can use ",(0,s.jsx)(n.a,{href:"#type-tags",children:"type tags"})," and ",(0,s.jsx)(n.a,{href:"#comment-tags",children:"comment tags"})," for it. For example, if you define a type with intersection symbol like ",(0,s.jsx)(n.code,{children:'number & typia.tags.Type<"uint32">'})," and validates it, ",(0,s.jsx)(n.code,{children:"typia"})," will check the target numeric value is unsigned integer or not."]}),"\n",(0,s.jsxs)(n.p,{children:["Also, in TypeScript (and JavaScript), writing ",(0,s.jsx)(n.code,{children:"@"})," character in comment is called ",(0,s.jsx)(n.a,{href:"#comment-tags",children:"Comment Tag"})," and ",(0,s.jsx)(n.code,{children:"typia"})," utilizes such comment tags for enhancing type validation logic. As you can see from below example code, ",(0,s.jsx)(n.code,{children:"typia"})," analyzes ",(0,s.jsx)(n.code,{children:"@tagName value"})," patterned comment tags, and generates optimal validation logic in the compilation level."]}),"\n",(0,s.jsxs)(n.p,{children:["Therefore, don’t be afraid ",(0,s.jsx)(n.code,{children:"typia"})," uses only pure TypeScript types for type validation schema. Don’t be afraid about TypeScript does not support ",(0,s.jsx)(n.code,{children:"integer"})," type. With those ",(0,s.jsx)(n.a,{href:"#type-tags",children:"type tags"})," and ",(0,s.jsx)(n.a,{href:"#comment-tags",children:"comment tags"}),", you can express every types in the world."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Q: How to validate integer type? TypeScript does not support it","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A1: Use type tag ",(0,s.jsx)(n.code,{children:'number & typia.tags.Type<"int32">'})]}),"\n",(0,s.jsxs)(n.li,{children:["A2: Write a comment tag ",(0,s.jsx)(n.code,{children:"@type int32"})," on the target property"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Q: Type Tag vs Comment Tags, which one is better","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A1: Type Tag is recommended because it is much safer and generous"}),"\n",(0,s.jsx)(n.li,{children:"A2: Comment Tag is designed for legacy JSDoc styled projects"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(a.t,{items:["TypeScript Source Code","Compiled JavaScript File"],children:[(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/src/validators/is-type-tag.ts",filename:"examples/src/validators/is-type-tag.ts",showLineNumbers:!0})}),(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/bin/validators/is-type-tag.js",filename:"examples/bin/validators/is-type-tag.js",showLineNumbers:!0})})]}),"\n",(0,s.jsx)(n.h2,{id:i[1].id,children:i[1].value}),"\n",(0,s.jsx)(n.p,{children:"By using type tags, you can utilize additional validation logics."}),"\n",(0,s.jsxs)(n.p,{children:["Just import one of type tags from ",(0,s.jsx)(n.code,{children:"typia"}),", and combine it with target through intersection symbol like ",(0,s.jsx)(n.code,{children:'number & typia.tags.Type<"uint32">'})," case. If you want to declare an union validation logic, combine ",(0,s.jsx)(n.code,{children:"|"})," and bracket (",(0,s.jsx)(n.code,{children:"()"}),") symbols properly like below:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'number & (Type<"uint32"> | Type<"double">)'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number"})," type can be both ",(0,s.jsx)(n.code,{children:"uint32"})," and ",(0,s.jsx)(n.code,{children:"double"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'(number & Type<"int32">) | (bigint & Type<"uint64">)'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number"})," is ",(0,s.jsx)(n.code,{children:"int32"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bigint"})," is ",(0,s.jsx)(n.code,{children:"uint64"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'(number & (Type<"int32">)| Type<"float">) | (bigint & Type<"uint64">)'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number"})," can be both ",(0,s.jsx)(n.code,{children:"int32"})," and ",(0,s.jsx)(n.code,{children:"float"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bigint"})," is ",(0,s.jsx)(n.code,{children:"uint64"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Here is the entire list of type tags that ",(0,s.jsx)(n.code,{children:"typia"})," basically supports."]}),"\n",(0,s.jsx)(n.p,{children:"For reference, when you take a mistake that choosing different target type, TypeScript compiler would block it with compilation error message. Also, if you take a mistake that placing invalid argument on the type, it would also be blocked IDE and compiler. Therefore, have a confidence when using them."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["number","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"number & Type<{keyword}>"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"int32"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uint32"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uint64"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"int64"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"float"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"double"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"number & Minimum<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"number & Maximum<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"number & ExclusiveMaximum<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"number & ExclusiveMinimum<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"number & MultipleOf<{number}>"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["bigint","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bigint & Type<{keyword}>"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"int64"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uint64"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"bigint & Minimum<{bigint}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"bigint & Maximum<{bigint}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"bigint & ExclusiveMaximum<{bigint}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"bigint & ExclusiveMinimum<{bigint}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"bigint & MultipleOf<{bigint}>"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["string","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"string & MinLength<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"string & MaxLength<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"string & Pattern<{regex}>"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string & Format<{keyword}>"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"byte"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"password"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"regex"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uuid"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"email"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"hostname"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"idn-email"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"idn-hostname"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"iri"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"iri-reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ipv4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ipv6"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uri"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uri-reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uri-template"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"url"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"date-time"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"date"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"time"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"duration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"json-pointer"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"relative-json-pointer"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["array","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Array<T> & MinItems<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Array<T> & MaxItems<{number}>"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Array<T> & UniqueItems"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Also, if you need custom validation logic, just make it by yourself referencing ",(0,s.jsx)(n.a,{href:"#customization",children:"Customization"})," section. It is easy to define. For such type safety and generous use case reasons even customization supporting, I recommend you to use type tags instead of ",(0,s.jsx)(n.a,{href:"#comment-tags",children:"comment tags"}),", unless you are maintaining a legacy JSDoc styled project."]}),"\n",(0,s.jsxs)(a.t,{items:["TypeScript Source Code","Compiled JavaScript File"],children:[(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/src/validators/is-type-tag.ts",filename:"examples/src/validators/is-type-tag.ts",showLineNumbers:!0})}),(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/bin/validators/is-type-tag.js",filename:"examples/bin/validators/is-type-tag.js",showLineNumbers:!0})})]}),"\n",(0,s.jsx)(n.h2,{id:i[2].id,children:i[2].value}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"typia"})," supports those comment tags, too."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is the entire list of comment tags that ",(0,s.jsx)(n.code,{children:"typia"})," supports."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["number","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@type {string}"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"int"})," / ",(0,s.jsx)(n.code,{children:"int32"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"uint"})," / ",(0,s.jsx)(n.code,{children:"uint32"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"int64"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uint64"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"float"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@minimum {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@maximum {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@exclusiveMinimum {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@exclusiveMaximum {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@multipleOf {number}"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["bigint","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@type uint64"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@minimum {bigint}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@maximum {bigint}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@exclusiveMinimum {bigint}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@exclusiveMaximum {bigint}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@multipleOf {bigint}"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["string","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@minLength {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@maxLength {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@pattern {regex}"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@format {keyword}"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"byte"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"password"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"regex"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uuid"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"email"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"hostname"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"idn-email"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"idn-hostname"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"iri"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"iri-reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ipv4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ipv6"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uri"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uri-reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"uri-template"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"url"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"date-time"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"date"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"time"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"duration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"json-pointer"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"relative-json-pointer"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["array","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@minItems {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@maxItems {number}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@uniqueItems"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["By the way, I do not recommend this way, because it can’t perform union numeric types, and can be used for only object property type. It can’t be used standalone, and cannot be used for element type of ",(0,s.jsx)(n.code,{children:"Array"})," and ",(0,s.jsx)(n.code,{children:"Map"})," even when they’re declared on object property. Also, When you declare ",(0,s.jsx)(n.code,{children:"@type int32"})," statement, target ",(0,s.jsx)(n.code,{children:"number"})," type be fixed as ",(0,s.jsx)(n.code,{children:"int32"})," type, and never can have another numeric type by declaring union statements."]}),"\n",(0,s.jsxs)(n.p,{children:["Also, those comment tags are not type safe. If you take a mistake when writing a comment tag, it will not be detected by the compiler, and will cause an error at runtime. For example, if you write a miss-spelled keyword like ",(0,s.jsx)(n.code,{children:"@type unit32"}),", the target ",(0,s.jsx)(n.code,{children:"number"})," type would be ",(0,s.jsx)(n.code,{children:"double"})," type, and you can identify it just by running the program (or visiting playground website)."]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)(l.A,{severity:"warning",children:[(0,s.jsx)(d.A,{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why supports comment tags?"})})}),(0,s.jsx)(n.p,{children:"Despite these disadvantages, the reason for maintaining comment tags is as follows."}),(0,s.jsx)(n.p,{children:"First, it is to support the legacy JSDoc style that had been used in the JS camp for a long time. If you had developed a legacy project and JSDoc being used, you can use it as is."}),(0,s.jsxs)(n.p,{children:["Second, to support ",(0,s.jsx)(n.a,{href:"../utilization/prisma",children:"Prisma"}),". If a comment is created in the Prisma Schema through the ",(0,s.jsx)(n.code,{children:"///"})," statement as shown below and a type is created, it is converted to a TS comment as it is. And since there is no way that union types, numeric ",(0,s.jsx)(n.code,{children:"Array"}),"s or ",(0,s.jsx)(n.code,{children:"Map"}),"s are used in Prisma (database) schema, these comment tags are surprisingly compatible with Prisma."]})]}),"\n",(0,s.jsxs)(a.t,{items:["TypeScript Source Code","Compiled JavaScript File"],children:[(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/src/validators/is-comment-tag.ts",filename:"examples/src/validators/is-comment-tag.ts",showLineNumbers:!0})}),(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/bin/validators/is-comment-tag.js",filename:"examples/bin/validators/is-comment-tag.js",showLineNumbers:!0})})]}),"\n",(0,s.jsx)(n.h2,{id:i[3].id,children:i[3].value}),"\n",(0,s.jsxs)(a.t,{items:[(0,s.jsx)(n.code,{children:"TagBase.ts"}),(0,s.jsx)(n.code,{children:"Minimum.ts"}),(0,s.jsx)(n.code,{children:"Type.ts"}),(0,s.jsx)(n.code,{children:"Pattern.ts"})],children:[(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/src/tags/TagBase.ts",filename:"typia/tags/TagBase.ts",showLineNumbers:!0})}),(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/src/tags/Minimum.ts",filename:"typia/tags/Minimum.ts",showLineNumbers:!0})}),(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/src/tags/Type.ts",filename:"typia/tags/Type.ts",showLineNumbers:!0})}),(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/src/tags/Pattern.ts",filename:"typia/tags/Pattern.ts",showLineNumbers:!0})})]}),"\n",(0,s.jsxs)(n.p,{children:["Above types are supported by ",(0,s.jsx)(n.code,{children:"typia"})," basically."]}),"\n",(0,s.jsxs)(n.p,{children:["If you make a custom type tag extending ",(0,s.jsx)(n.code,{children:"typia.tags.TagBase<Props>"})," type, and utilize it on your type with intersection symbol like ",(0,s.jsx)(n.code,{children:"number & Minimum<3>"}),", its validation logic ",(0,s.jsx)(n.code,{children:"3 <= $input"})," would be inserted into the compiled JavaScript file."]}),"\n",(0,s.jsxs)(n.p,{children:["Also, as you can see from the ",(0,s.jsx)(n.code,{children:"typia.tags.TagBase<Props>"})," type, you have to specify which ",(0,s.jsx)(n.code,{children:"target"})," type is the tag for, and need to define the tag can be compatible with others or not through ",(0,s.jsx)(n.code,{children:"exclusive"})," options. If your custom tag has multiple ",(0,s.jsx)(n.code,{children:"target"})," types, you can support all of those ",(0,s.jsx)(n.code,{children:"target"})," types by defining ",(0,s.jsx)(n.code,{children:"validate"})," property as ",(0,s.jsx)(n.code,{children:"Record<Target, string>"})," type like ",(0,s.jsx)(n.code,{children:"Type"})," tag case."]}),"\n",(0,s.jsxs)(n.p,{children:["In the Korean proverb, there’s a word that, “it is much better to do it once than to hear it a hundred times”. Let’s see how custom type tag of ",(0,s.jsx)(n.code,{children:"typia"})," can be defined and utilized through an example code. I’ll define three custom tag types, ",(0,s.jsx)(n.code,{children:"Postfix"}),", ",(0,s.jsx)(n.code,{children:"Dollar"})," and ",(0,s.jsx)(n.code,{children:"IsEven"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Here is the example code, and I think that it may easy to understand."}),"\n",(0,s.jsxs)(a.t,{items:["TypeScript Source Code","Compiled JavaScript File"],children:[(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/src/validators/is-custom-tags.ts",filename:"examples/src/validators/is-custom-tags.ts",showLineNumbers:!0})}),(0,s.jsx)(a.t.Tab,{children:(0,s.jsx)(o.A,{url:"https://raw.githubusercontent.com/samchon/typia/refs/heads/master/examples/bin/validators/is-custom-tags.js",filename:"examples/bin/validators/is-custom-tags.js",showLineNumbers:!0})})]})]})},"/docs/validators/tags",{filePath:"pages/docs/validators/tags.mdx",timestamp:1750600804e3,pageMap:r.O,frontMatter:{title:"Guide Documents > Runtime Validators > Special Tags"},title:"Guide Documents > Runtime Validators > Special Tags"},"undefined"==typeof RemoteContent?h:RemoteContent.useTOC)}},e=>{var i=i=>e(e.s=i);e.O(0,[4635,2333,8302,2017,1807,2909,6506,7393,9807,6038,636,6593,8792],()=>i(58154)),_N_E=e.O()}]);