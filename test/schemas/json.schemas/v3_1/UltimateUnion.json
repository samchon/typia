{
  "version": "3.1",
  "components": {
    "schemas": {
      "UltimateUnion": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/IJsonSchemaCollection.IV3_1Arrayunknown"
        }
      },
      "IJsonSchemaCollection.IV3_1Arrayunknown": {
        "type": "object",
        "properties": {
          "version": {
            "const": "3.1"
          },
          "components": {
            "$ref": "#/components/schemas/OpenApi.IComponents"
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApi.IJsonSchema"
            }
          },
          "__types": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "version",
          "components",
          "schemas"
        ]
      },
      "OpenApi.IComponents": {
        "type": "object",
        "properties": {
          "schemas": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IJsonSchema",
            "title": "An object to hold reusable DTO schemas",
            "description": "An object to hold reusable DTO schemas.\n\nIn other words, a collection of named JSON schemas."
          },
          "securitySchemes": {
            "$ref": "#/components/schemas/RecordstringOpenApi.ISecurityScheme",
            "title": "An object to hold reusable security schemes",
            "description": "An object to hold reusable security schemes.\n\nIn other words, a collection of named security schemes."
          }
        },
        "required": [],
        "description": "Reusable components in OpenAPI.\n\nA storage of reusable components in OpenAPI document.\n\nIn other words, it is a storage of named DTO schemas and security schemes."
      },
      "RecordstringOpenApi.IJsonSchema": {
        "type": "object",
        "properties": {},
        "required": [],
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.IJsonSchema"
        }
      },
      "OpenApi.IJsonSchema": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IString"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.INumber"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IConstant"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IBoolean"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IInteger"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IArray"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.ITuple"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IObject"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IReferencestring"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IOneOf"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.INull"
          },
          {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IUnknown"
          }
        ],
        "title": "Type schema info",
        "description": "Type schema info.\n\n`OpenApi.IJsonSchema` is a type schema info of the OpenAPI.\n\n`OpenApi.IJsonSchema` basically follows the JSON schema definition of\nOpenAPI v3.1, but a little bit shrinked to remove ambiguous and duplicated\nexpressions of OpenAPI v3.1 for the convenience and clarity.\n\n- Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\n- Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\n- Array type utilizes only single {@link OpenAPI.IJsonSchema.IArray.items}\n- Tuple type utilizes only {@link OpenApi.IJsonSchema.ITuple.prefixItems}\n- Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link OpenApi.IJsonSchema.IObject}\n- Merge {@link OpenApiV3_1.IJsonSchema.IAnyOf} to {@link OpenApi.IJsonSchema.IOneOf}\n- Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link OpenApi.IJsonSchema.IReference}"
      },
      "OpenApi.IJsonSchema.IString": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "title": "Default value",
            "description": "Default value."
          },
          "format": {
            "type": "string",
            "title": "Format restriction",
            "description": "Format restriction."
          },
          "pattern": {
            "type": "string",
            "title": "Pattern restriction",
            "description": "Pattern restriction."
          },
          "contentMediaType": {
            "type": "string",
            "title": "Content media type restriction",
            "description": "Content media type restriction."
          },
          "minLength": {
            "type": "integer",
            "title": "Minimum length restriction",
            "description": "Minimum length restriction."
          },
          "maxLength": {
            "type": "integer",
            "title": "Maximum length restriction",
            "description": "Maximum length restriction."
          },
          "type": {
            "const": "string",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "String type info."
      },
      "Recordstringany": {
        "type": "object",
        "properties": {},
        "required": [],
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {}
      },
      "OpenApi.IJsonSchema.INumber": {
        "type": "object",
        "properties": {
          "default": {
            "type": "number",
            "title": "Default value",
            "description": "Default value."
          },
          "minimum": {
            "type": "number",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "number",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenAiComposer}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
          },
          "multipleOf": {
            "type": "number",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "number",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Number (double) type info."
      },
      "OpenApi.IJsonSchema.IConstant": {
        "type": "object",
        "properties": {
          "const": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "The constant value",
            "description": "The constant value."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "const"
        ],
        "description": "Constant value type."
      },
      "OpenApi.IJsonSchema.IBoolean": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean",
            "title": "The default value",
            "description": "The default value."
          },
          "type": {
            "const": "boolean",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Boolean type info."
      },
      "OpenApi.IJsonSchema.IInteger": {
        "type": "object",
        "properties": {
          "default": {
            "type": "integer",
            "title": "Default value",
            "description": "Default value."
          },
          "minimum": {
            "type": "integer",
            "title": "Minimum value restriction",
            "description": "Minimum value restriction."
          },
          "maximum": {
            "type": "integer",
            "title": "Maximum value restriction",
            "description": "Maximum value restriction."
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "title": "Exclusive minimum value restriction",
            "description": "Exclusive minimum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMinimum` value as `number`, {@link OpenApi}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link minimum} property."
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "title": "Exclusive maximum value restriction",
            "description": "Exclusive maximum value restriction.\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined the `exclusiveMaximum` value as `number`, {@link OpenApi}\nforcibly converts it to `boolean` type, and assign the numeric value to\nthe {@link maximum} property."
          },
          "multipleOf": {
            "type": "integer",
            "exclusiveMinimum": true,
            "minimum": 0,
            "title": "Multiple of value restriction",
            "description": "Multiple of value restriction."
          },
          "type": {
            "const": "integer",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Integer type info."
      },
      "OpenApi.IJsonSchema.IArray": {
        "type": "object",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema",
            "title": "Items type info",
            "description": "Items type info.\n\nThe `items` means the type of the array elements. In other words, it is\nthe type schema info of the `T` in the TypeScript array type `Array<T>`."
          },
          "uniqueItems": {
            "type": "boolean",
            "title": "Unique items restriction",
            "description": "Unique items restriction.\n\nIf this property value is `true`, target array must have unique items."
          },
          "minItems": {
            "type": "integer",
            "title": "Minimum items restriction",
            "description": "Minimum items restriction.\n\nRestriction of minumum number of items in the array."
          },
          "maxItems": {
            "type": "integer",
            "title": "Maximum items restriction",
            "description": "Maximum items restriction.\n\nRestriction of maximum number of items in the array."
          },
          "type": {
            "const": "array",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "items",
          "type"
        ],
        "description": "Array type info."
      },
      "OpenApi.IJsonSchema.ITuple": {
        "type": "object",
        "properties": {
          "prefixItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenApi.IJsonSchema"
            },
            "title": "Prefix items",
            "description": "Prefix items.\n\nThe `prefixItems` means the type schema info of the prefix items in the\ntuple type. In the TypeScript, it is expressed as `[T1, T2]`.\n\nIf you want to express `[T1, T2, ...TO[]]` type, you can configure the\n`...TO[]` through the {@link additionalItems} property."
          },
          "additionalItems": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IUnknown"
              }
            ],
            "title": "Additional items",
            "description": "Additional items.\n\nThe `additionalItems` means the type schema info of the additional items\nafter the {@link prefixItems}. In the TypeScript, if there's a type\n`[T1, T2, ...TO[]]`, the `...TO[]` is represented by the `additionalItems`.\n\nBy the way, if you configure the `additionalItems` as `true`, it means\nthe additional items are not restricted. They can be any type, so that\nit is equivalent to the TypeScript type `[T1, T2, ...any[]]`.\n\nOtherwise configure the `additionalItems` as the {@link IJsonSchema},\nit means the additional items must follow the type schema info.\nTherefore, it is equivalent to the TypeScript type `[T1, T2, ...TO[]]`."
          },
          "uniqueItems": {
            "type": "boolean",
            "title": "Unique items restriction",
            "description": "Unique items restriction.\n\nIf this property value is `true`, target tuple must have unique items."
          },
          "minItems": {
            "type": "integer",
            "title": "Minimum items restriction",
            "description": "Minimum items restriction.\n\nRestriction of minumum number of items in the tuple."
          },
          "maxItems": {
            "type": "integer",
            "title": "Maximum items restriction",
            "description": "Maximum items restriction.\n\nRestriction of maximum number of items in the tuple."
          },
          "type": {
            "const": "array",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "prefixItems",
          "type"
        ],
        "description": "Tuple type info."
      },
      "OpenApi.IJsonSchema.IObject": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/RecordstringOpenApi.IJsonSchema",
            "title": "Properties of the object",
            "description": "Properties of the object.\n\nThe `properties` means a list of key-value pairs of the object's\nregular properties. The key is the name of the regular property,\nand the value is the type schema info.\n\nIf you need additional properties that is represented by dynamic key,\nyou can use the {@link additionalProperties} instead."
          },
          "additionalProperties": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IString"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.INumber"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IConstant"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IBoolean"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IInteger"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IArray"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.ITuple"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IObject"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IReferencestring"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IOneOf"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.INull"
              },
              {
                "$ref": "#/components/schemas/OpenApi.IJsonSchema.IUnknown"
              }
            ],
            "title": "Additional properties' info",
            "description": "Additional properties' info.\n\nThe `additionalProperties` means the type schema info of the additional\nproperties that are not listed in the {@link properties}.\n\nIf the value is `true`, it means that the additional properties are not\nrestricted. They can be any type. Otherwise, if the value is\n{@link IOpenAiSchema} type, it means that the additional properties must\nfollow the type schema info.\n\n- `true`: `Record<string, any>`\n- `IOpenAiSchema`: `Record<string, T>`"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of key values of the required properties",
            "description": "List of key values of the required properties.\n\nThe `required` means a list of the key values of the required\n{@link properties}. If some property key is not listed in the `required`\nlist, it means that property is optional. Otherwise some property key\nexists in the `required` list, it means that the property must be filled.\n\nBelow is an example of the {@link properties} and `required`.\n\n```typescript\ninterface SomeObject {\n  id: string;\n  email: string;\n  name?: string;\n}\n```\n\nAs you can see, `id` and `email` {@link properties} are {@link required},\nso that they are listed in the `required` list.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"string\" }\n  },\n  \"required\": [\"id\", \"email\"]\n}\n```"
          },
          "type": {
            "const": "object",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Object type info."
      },
      "OpenApi.IJsonSchema.IReferencestring": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "title": "Reference to the named schema",
            "description": "Reference to the named schema.\n\nThe `ref` is a reference to the named schema. Format of the `$ref` is\nfollowing the JSON Pointer specification. In the OpenAPI, the `$ref`\nstarts with `#/components/schemas/` which means the type is stored in\nthe {@link OpenApi.IComponents.schemas} object.\n\n- `#/components/schemas/SomeObject`\n- `#/components/schemas/AnotherObject`"
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "$ref"
        ],
        "description": "Reference type directing named schema."
      },
      "OpenApi.IJsonSchema.IOneOf": {
        "type": "object",
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IString"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.INumber"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IConstant"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IBoolean"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IInteger"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IArray"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.ITuple"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IObject"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IReferencestring"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.INull"
                },
                {
                  "$ref": "#/components/schemas/OpenApi.IJsonSchema.IUnknown"
                }
              ]
            },
            "title": "List of the union types",
            "description": "List of the union types."
          },
          "discriminator": {
            "$ref": "#/components/schemas/OpenApi.IJsonSchema.IOneOf.IDiscriminator",
            "title": "Discriminator info of the union type",
            "description": "Discriminator info of the union type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "oneOf"
        ],
        "description": "Union type.\n\nIOneOf` represents an union type of the TypeScript (`A | B | C`).\n\nFor reference, even though your Swagger (or OpenAPI) document has\ndefined `anyOf` instead of the `oneOf`, {@link OpenApi} forcibly\nconverts it to `oneOf` type."
      },
      "OpenApi.IJsonSchema.INull": {
        "type": "object",
        "properties": {
          "default": {
            "type": "null",
            "title": "Default value",
            "description": "Default value."
          },
          "type": {
            "const": "null",
            "title": "Discriminator value of the type",
            "description": "Discriminator value of the type."
          },
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [
          "type"
        ],
        "description": "Null type."
      },
      "OpenApi.IJsonSchema.IUnknown": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title of the schema",
            "description": "Title of the schema."
          },
          "description": {
            "type": "string",
            "title": "Detailed description of the schema",
            "description": "Detailed description of the schema."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Whether the type is deprecated or not",
            "description": "Whether the type is deprecated or not."
          },
          "example": {
            "title": "Example value",
            "description": "Example value."
          },
          "examples": {
            "$ref": "#/components/schemas/Recordstringany",
            "title": "List of example values as key-value pairs",
            "description": "List of example values as key-value pairs."
          }
        },
        "required": [],
        "description": "Unknown, the `any` type."
      },
      "OpenApi.IJsonSchema.IOneOf.IDiscriminator": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string",
            "title": "Property name for the discriminator",
            "description": "Property name for the discriminator."
          },
          "mapping": {
            "$ref": "#/components/schemas/Recordstringstring",
            "title": "Mapping of the discriminator value to the schema name",
            "description": "Mapping of the discriminator value to the schema name.\n\nThis property is valid only for {@link IReference} typed\n{@link IOneOf.oneof} elements. Therefore, `key` of `mapping` is\nthe discriminator value, and `value` of `mapping` is the\nschema name like `#/components/schemas/SomeObject`."
          }
        },
        "required": [
          "propertyName"
        ],
        "description": "Discriminator info of the union type."
      },
      "Recordstringstring": {
        "type": "object",
        "properties": {},
        "required": [],
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "type": "string"
        }
      },
      "RecordstringOpenApi.ISecurityScheme": {
        "type": "object",
        "properties": {},
        "required": [],
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "$ref": "#/components/schemas/OpenApi.ISecurityScheme"
        }
      },
      "OpenApi.ISecurityScheme": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IApiKey"
          },
          {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IHttpBasic"
          },
          {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IHttpBearer"
          },
          {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOAuth2"
          },
          {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOpenId"
          }
        ],
        "title": "Security scheme of Swagger Documents",
        "description": "Security scheme of Swagger Documents.\n\n`OpenApi.ISecurityScheme` is a data structure representing content of\n`securitySchemes` in `swagger.json` file. It is composed with 5 types of\nsecurity schemes as an union type like below."
      },
      "OpenApi.ISecurityScheme.IApiKey": {
        "type": "object",
        "properties": {
          "type": {
            "const": "apiKey"
          },
          "in": {
            "oneOf": [
              {
                "const": "cookie"
              },
              {
                "const": "header"
              },
              {
                "const": "query"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "description": "Normal API key type."
      },
      "OpenApi.ISecurityScheme.IHttpBasic": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "basic"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ],
        "description": "HTTP basic authentication type."
      },
      "OpenApi.ISecurityScheme.IHttpBearer": {
        "type": "object",
        "properties": {
          "type": {
            "const": "http"
          },
          "scheme": {
            "const": "bearer"
          },
          "bearerFormat": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "scheme"
        ],
        "description": "HTTP bearer authentication type."
      },
      "OpenApi.ISecurityScheme.IOAuth2": {
        "type": "object",
        "properties": {
          "type": {
            "const": "oauth2"
          },
          "flows": {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOAuth2.IFlowSet"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "flows"
        ],
        "description": "OAuth2 authentication type."
      },
      "OpenApi.ISecurityScheme.IOAuth2.IFlowSet": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "$ref": "#/components/schemas/OpenApi.ISecurityScheme.IOAuth2.IFlow"
          },
          "implicit": {
            "$ref": "#/components/schemas/OmitOpenApi.ISecurityScheme.IOAuth2.IFlowtokenUrl"
          },
          "password": {
            "$ref": "#/components/schemas/OmitOpenApi.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          },
          "clientCredentials": {
            "$ref": "#/components/schemas/OmitOpenApi.ISecurityScheme.IOAuth2.IFlowauthorizationUrl"
          }
        },
        "required": []
      },
      "OpenApi.ISecurityScheme.IOAuth2.IFlow": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "required": []
      },
      "OmitOpenApi.ISecurityScheme.IOAuth2.IFlowtokenUrl": {
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "required": [],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OmitOpenApi.ISecurityScheme.IOAuth2.IFlowauthorizationUrl": {
        "type": "object",
        "properties": {
          "tokenUrl": {
            "type": "string"
          },
          "refreshUrl": {
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "required": [],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "OpenApi.ISecurityScheme.IOpenId": {
        "type": "object",
        "properties": {
          "type": {
            "const": "openIdConnect"
          },
          "openIdConnectUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "openIdConnectUrl"
        ]
      }
    }
  },
  "schemas": [
    {
      "$ref": "#/components/schemas/UltimateUnion"
    }
  ]
}